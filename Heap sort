#include <iostream>
using namespace std;


// function to heapify the tree
void heapify(int arr[], int n, int root)
{
   // build heapify
    
    int max_num = root;  // let's take largest number index as the root index.
    int left = 2 * i + 1;
    int right = 2 * i + 2;
    
    if (left < n && arr[left] > arr[max_num])  // If left child value is larger than the root value, re-assign the max_num as that left child index.
        max_num = left;
    if (right < n && arr[right] > arr[max_num])  // If right child value is larger than the root value, re-assign the max_num as that right child index.
        max_num = right;

    if (max_num != i)  // If largest is not root, then swap relevant index values.
    {
    // swapping maximum element with its parent node.
        int x = arr[max_num];   // take the element value for temporarily.
        arr[max_num] = arr[i];   //store it into the parent node.
        arr[i] = x;

        heapify(arr, n, max_num);  // Recursively heapify the other subtree.
    }
}


// implementing heap sort
void heapSort(int arr[], int n)
{
   // build heap
    for (int i = n / 2 - 1; i >= 0; i--)
    {
      heapify(arr, n, i);
    }

   // extracting elements from heap one by one
    for (int i = n - 1; i > 0; i--)
    {
      //swapping current root with end.
      int x = arr[i];   // take the element value for temporarily.
      arr[i] = arr[0];   //store it into the parent node.
      arr[0] = x;

    // call max heapify on the reduced heap
      heapify(arr, i, 0);
    }

}

/* print contents of array */
void displayArray(int arr[], int n)
{
   for (int i=0; i<n; ++i)
   cout << arr[i] << " ";
   cout << "\n";
}

// main program
int main()
{
   int heap_arr[] = {4,17,3,12,9,6};
   int n = sizeof(heap_arr)/sizeof(heap_arr[0]);
   cout<<"Input array"<<endl;
   displayArray(heap_arr,n);

   heapSort(heap_arr, n);

   cout << "Sorted array"<<endl;
   displayArray(heap_arr, n);
}
